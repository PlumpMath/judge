INSERT INTO `judge`.`problems` (`id`, `title`, `submit_count`, `accept_count`, `accept_users`, `input_desc`, `output_desc`, `description`, `hint`, `case_count`, `added_date`, `source`, `time_limit`, `memory_limit`, `sample_input`, `sample_output`) VALUES
(1,
'덧셈',
0, 0, 0,
'정수 a, b가 주어진다.',
'a+b',
'0 이상, 2^29-1 이하의 두 정수 a, b의 합을 구하여라.',
'',
3,
CURRENT_TIMESTAMP,
'studioh',
1, 16,
'[ \"1 3\", \"2 5\"]',
'[ \"4\", \"7\" ]'),
(2,
'나머지',
0, 0, 0,
'<p>첫 번째 줄에는 정수 n이 주어집니다.</p><p>이 후 두번째 줄에는 공백으로 구분하여 자연수들이 입력됩니다.</p><p>준비된 테스트케이스는 다음을 만족합니다.</p><p>- 총 테스트케이스의 30%는 n이 10 이하이고 각각의 수들이 int 범위 이내이며, 곱셈 결과가 int 범위 이내입니다.</p><p>- 총 테스트케이스의 50%는 n이 10 이하이고 각각의 수들이 int 범위 이내이며, 곱셈 결과가 long long 범위 이내입이다.</p><p>- 총 테스트케이스의 80%는 n이 100 이하이고 각각의 수들이 int 범위 이내이며, 곱셈 결과가 10의 1000승 이내입니다.</p><p>- 총 테스트케이스의 100%는 n이 1,000 이하이며, 각각의 수들이 long long 범위 이내이며, 곱셈 결과가 10의 10000승 이내입니다.</p>',
'<p>자연수들을 모두 곱한 후 2013으로 나눈 나머지를 출력하시면 됩니다.</p>',
'<p>여러분들에게 n개의 자연수들이 주어집니다.</p><p>여러분들은 이 n개의 자연수들을 모두 곱한 후 2013으로 나눈 나머지를 출력하시면 됩니다.</p>',
'',
5,
CURRENT_TIMESTAMP,
'codeup 5039',
1, 128,
'[ \"5<br />2 3 2 5 4\"]',
'[ \"240\" ]'),
(3,
'섭씨 온도를 화씨 온도로 변환',
0, 0, 0,
'<p>섭씨 온도가 입력된다. (정수)</p>',
'<p>화씨온도를 소수 셋째자리 까지 출력한다. (실수)</p>',
'<p>섭씨 온도가 입력되면 화씨 온도로 변환하시오.</p><p>화씨 온도 = 9 / 5 * 섭씨온도 + 32</p>',
'',
5,
CURRENT_TIMESTAMP,
'codeup 1123',
1, 128,
'[ \"30\"]',
'[ \"86.000\" ]'),
(4,
'거품 정렬(Bubble Sort)',
0, 0, 0,
'<p>버블 정렬이란 이웃하는 숫자들끼리 크기를 비교하여 자리를 바꾸는 정렬 기법이다.</p><p>버블 정렬은 구현이 쉬운 반면 속도가 빠른 편은 아니다.</p><p>그리고 가장 큰 단점으로 정렬이 이미 다 끝났는데도, 끝까지 대소비교를 하는 문제점이 있다.</p><p>예를 들어, 10 50 30 20 40 이 있고 오름차순으로 정렬한다면 총 4단계를 거치게되는데,</p><p>1단계 : 10 30 20 40 50</p><p>2단계 : 10 20 30 40 50 &nbsp;(정렬 완료)</p><p>3단계 : 10 20 30 40 50</p><p>4단계 : 10 20 30 40 50</p><p>4단계중 이미 2단계에서 정렬이 완료가 된다.</p><p>이 단계를 구하는것이 문제이다. 이 단계를 찾아 프로그램을 종료시키면 정렬속도를 향상 시킬수있다.</p><p>이 단계를 찾아 내는 프로그램을 작성하시오.</p>',
'<p>정렬이 끝나는 단계를 출력한다.</p>',
'<p>섭씨 온도가 입력되면 화씨 온도로 변환하시오.</p><p>화씨 온도 = 9 / 5 * 섭씨온도 + 32</p>',
'',
5,
CURRENT_TIMESTAMP,
'codeup 1123',
1, 128,
'[ \"5<br />10 50 30 20 40\"]',
'[ \"2\" ]'),
(5,
'천단위 구분기호',
0, 0, 0,
'<p>첫째 줄에 숫자의 길이 n이 입력된다. (1 <= n <= 200)</p><p>둘째 줄에 길이가 n인 숫자가 입력된다.</p>',
'<p>첫단위 구분기호 콤마를 넣어 출력하시오.</p>',
'<p>우리는 흔히 숫자를 쓸때 천단위 구분기호인 콤마(,)를 많이 쓴다.</p><p>숫자가 입력되면 천단위 구분기호를 넣어 숫자를 출력하시오.</p>',
'',
5,
CURRENT_TIMESTAMP,
'codeup 2016',
1, 128,
'[ \"8<br/>12421421\"]',
'[ \"12,421,421\" ]');
